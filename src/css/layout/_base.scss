/* Force main to take at least the height of the viewport,
 * especially for applying a background color on the landing.
 * See http://stackoverflow.com/a/17555766/347386
 * but we're using body height 100% because nesting min-height doesn't work, see
 * http://stackoverflow.com/q/16043519/347386
 * The SO answer says using body height 100% will "leave a gap beneath the fold,
 * which is usually undesirable" but I couldn't find anything wrong.
 */
html, body {
    height: 100%;
}

body {
    color: color('black');
}

header {
    padding-top: 1em;
    padding-bottom: 0.5em;
    background-color: color('white');
}

header .site-wordmark,
header .menu-toggle {
    font-size: 2rem;

    line-height: 1;
    margin-bottom: 0;
}

header .site-wordmark a {
    color: color('black');
    font-weight: bold;
    text-transform: uppercase;
}

header .site-wordmark a:hover {
    color: color('black');
}

main {
    position: relative;
    min-height: 100%;  // of body
    padding-bottom: 12em;  // sufficient for footer
    background-color: color('white');
}

.landing main {
    padding-bottom: 0px;  // no footer on landing
    background-color: color('white');
}

.landing h1 {
    max-width: 12em;
    margin-top: 0;  // enable flexbox-based vert centering
    margin-bottom: 0.625em;
    color: color('black');
}

.landing p {
    max-width: 32em;
    line-height: 1.5;
    color: color('black');
}

.content-main {
    margin-top: 6rem;
    margin-bottom: 3rem;
}

// https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
.flex-ie-hack {
    display: flex;
    flex-direction: column;
}

.flex-vertical-center {
    display: flex;
    flex-flow: column;
    justify-content: center;
    padding-top: 2em;  // 2x nav top
    padding-bottom: 2em;  // maintains centering
    min-height: 100vh;  // in case calc() doesn't work
    min-height: calc(100vh - 54px);  // 54px is mobile nav header
    @media screen and (min-width: $mobile-large) {
        // 57.75px is desktop nav header.
        // This doesn't change at 65em when the menu items are revealed.
        min-height: calc(100vh - 57.75px);
    }
}

.flex-item-wrapper {
    /*
    .landing h1 and .landing p both have max-width constraints. Normally
    .container would still occupy the full width available and the auto
    margins on right and left would center the block on the page. In other
    words, the width of .container should not be determined by its content
    but rather by the available space.

    However when .container is a flex item--meaning the direct child of
    a flex box--then the calculations changes. Instead of occupying width
    available, its width corresponds to the width of its h1 and p content.
    The result is that the susy container appears indented rather than
    flush left aligned with the top bar content.

    The first workaround was to put flexbox inside the susy container, see
    55e067d. However that results in bad rendering on iphone 4 and old android
    browser.

    This new workaround adds div.flex-item-wrapper which seems to iron out the
    cross-width calculation on the flex box. This way .container is no
    longer a flex item itself and spans the intended width.
    */
}
